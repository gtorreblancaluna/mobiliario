/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms.proveedores;

import mobiliario.*;
import services.SaleService;
import clases.sqlclass;
import java.awt.Toolkit;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.Articulo;
import model.DetalleRenta;
import model.Renta;
import model.providers.DetalleOrdenProveedor;
import model.providers.OrdenProveedor;
import model.providers.Proveedor;
import services.ItemService;
import services.SystemService;
import services.providers.OrderProviderService;

/**
 *
 * @author Gerardo Torreblanca
 */
public class AddOrderProvider extends java.awt.Dialog {

    sqlclass funcion = new sqlclass();
    
    Object[][] dtconduc;      
    SaleService saleService = new SaleService();
    SystemService systemService = new SystemService();
    ItemService itemService = new ItemService();
    OrderProviderService orderProviderService = new OrderProviderService();
    public static String g_articuloId;
    public static String g_rentaId;
    public static String g_cantidadEnPedido;
    public static Long g_provider_id;
    public static Long g_order_provider_id;
    private String navigation;
    
    /** Encabezados de la tabla FALTANTES */
   
    public final static int HD_ORDEN_PROVEEDOR_ID_ORDEN = 0;
    public final static int HD_ORDEN_PROVEEDOR_ID_ARTICULO = 1;
    public final static int HD_ORDEN_PROVEEDOR_DESCRIPCION_ARTICULO = 2;
    public final static int HD_ORDEN_PROVEEDOR_CANTIDAD = 3;
    public final static int HD_ORDEN_PROVEEDOR_PRECIO = 4;
    public final static int HD_ORDEN_PROVEEDOR_COMENTARIO = 5;
    public final static int HD_ORDEN_PROVEEDOR_TIPO_ORDEN = 6;
   
    
    /** Encabezados de la tabla FALTANTES */
    public final static int HD_ARTICULOS_ID_ARTICULO = 0;
    public final static int HD_ARTICULOS_CANTIDAD_PEDIDO = 1;
    public final static int HD_ARTICULOS_DESCRIPCION_ARTICULO = 2;
    public final static int HD_ARTICULOS_PRECIO_COBRAR = 3;
    
    public final static String UPDATE_ORDER = "update order";
    public final static String NEW_ORDER = "new order";
    
    public final static String TO_BUILDER_TYPE_SHOPPING = "1 - compra";
    public final static String TO_BUILDER_TYPE_RENTAL = "2 - renta";
    
   
   private static final org.apache.log4j.Logger LOGGER = org.apache.log4j.Logger.getLogger(AddOrderProvider.class.getName());
    
   public void saveOrderProvider(){
       
       StringBuilder message = new StringBuilder();
       if(g_provider_id == null ){
           message.append("Falta proveedor, puedes elejir proveedor provisional\n");
       }
       if(g_rentaId == null || g_rentaId.equals("")){
           message.append("No se obtuvo el folio de la renta, recarga la ventana nuevamente :(\n");
       }
       if(jTableOrderProvider.getRowCount() == 0){
           message.append("No existen articulos para guardar\n");
       }
       
       if(!message.toString().equals("")){
           JOptionPane.showMessageDialog(null, message+"", "Error", JOptionPane.INFORMATION_MESSAGE);
           return;
       }
       
      List<DetalleOrdenProveedor> list = new ArrayList<>();
      OrdenProveedor orden = new OrdenProveedor();
      
      Articulo articulo;
      DetalleOrdenProveedor detail;
      for (int i = 0; i < jTableOrderProvider.getRowCount(); i++) {        
           detail = new DetalleOrdenProveedor();
           articulo = new Articulo();
           
           if(!jTableOrderProvider.getValueAt(i, 0).toString().equals("0")){
               // viene de actualizar lo ignoramos
               continue;
           }
           String articuloId = 
                   jTableOrderProvider.getValueAt(i, 1).toString();
           String cantidad = 
                   jTableOrderProvider.getValueAt(i, 3).toString();
           String precio = 
                   jTableOrderProvider.getValueAt(i, 4).toString();
           
           String comentario = 
                   jTableOrderProvider.getValueAt(i, 5).toString();
           
            String tipo = 
                   jTableOrderProvider.getValueAt(i, 6).toString();
            String[] arrayTipo = tipo.split("-");
            String tipoFinal = arrayTipo[0].trim();
           
           articulo.setArticuloId(new Integer(articuloId));
           
           detail.setArticulo(articulo);
           detail.setCantidad(new Float(cantidad));
           detail.setPrecio(new Float(precio));
           detail.setTipoOrden(tipoFinal);
           detail.setComentario(comentario);
           
           list.add(detail);
           
      } // end for
      
      orden.setDetalleOrdenProveedorList(list);
      Renta renta = new Renta();
      renta.setRentaId(new Integer(g_rentaId));
      orden.setRenta(renta);
      orden.setUsuario(iniciar_sesion.usuarioGlobal);
      Proveedor proveedor = new Proveedor();
      proveedor.setId(g_provider_id);
      orden.setProveedor(proveedor);
      orden.setStatus(ApplicationConstants.STATUS_ORDER_PROVIDER_ORDER);
      orden.setComentario(txtCommentOrder.getText());
      
      String confirmationMessage=null;
      if(navigation.equals(UPDATE_ORDER)){
          orden.setId(g_order_provider_id);
          orderProviderService.updateOrder(orden);
          confirmationMessage = ApplicationConstants.MESSAGE_UPDATE_SUCCESSFUL;
      }else{
        orderProviderService.saveOrder(orden);
        confirmationMessage = ApplicationConstants.MESSAGE_SAVE_SUCCESSFUL;
      } 
      
      JOptionPane.showMessageDialog(null, confirmationMessage, "EXITO", JOptionPane.INFORMATION_MESSAGE);
      this.dispose();
      
   }
    
    public void showProviders() {
        SelectProviderToOrder win = new SelectProviderToOrder(null, true);
        win.setVisible(true);
        win.setLocationRelativeTo(null);
    }
    public AddOrderProvider(java.awt.Frame parent, boolean modal) {
        super(parent, modal);        
        initComponents();
        funcion.conectate();
        this.setLocationRelativeTo(null);
        this.lblQuitarElemento.setText("");
        this.setTitle("Agregar orden al proveedor ");
        formato_tabla_orden();
        formato_tabla_articulos();      
        llenar_tabla_articulos();
        resetInputBoxes();
       
        
    }
    
    public void resetInputBoxes(){
        this.txtPrecioCobrar.setEnabled(false);
        this.txtCantidad.setEnabled(false);
        this.txtComentario.setEnabled(false);
        this.txtArticulo.setEnabled(false);
        
        this.txtPrecioCobrar.setText("");
        this.txtCantidad.setText("");
        this.txtComentario.setText("");
        this.txtArticulo.setText("");
        resetComboOrderType();
    }
    
    public void enabledInputBoxes(){
        this.txtPrecioCobrar.setEnabled(true);
        this.txtCantidad.setEnabled(true);
        this.txtComentario.setEnabled(true);
    }
    
    public void llenar_tabla_articulos(){
        
        List<OrdenProveedor> ordenProveedorList = new ArrayList<>();
        OrdenProveedor ordenProveedor = new OrdenProveedor();
        
        
        if(consultar_renta.g_idRenta == null || 
                consultar_renta.g_idRenta.equals("") ||
                consultar_renta.g_idRenta.isEmpty()){
            // viene de ver ordenes proveedores
            navigation = UPDATE_ORDER;
            
        }else{
           
            g_rentaId = consultar_renta.g_idRenta;
            ordenProveedorList = orderProviderService.getOrdersByRentaId(new Integer(g_rentaId));
            
            
            if(ordenProveedorList != null && ordenProveedorList.size()==1 ){
                Integer option =
                        JOptionPane.showOptionDialog(this, "Existe una orden, Elija SI para continuar con esta orden o eliga NO para agregar nueva orden " ,"Confirme", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si");
                if(option == 1){
                 // elijio que NO, agregar nueva orden
                    
                }else{
                    // elijio que SI, continuar con esta orden
                    ordenProveedor = ordenProveedorList.get(0);
                }  
            }else if(ordenProveedorList != null && ordenProveedorList.size()>1 ){
               JOptionPane.showMessageDialog(null, "ATENCI\u00D3N, existen varias ordenes para este folio, al continuar agregar\u00E1s una nueva orden ...", "ATENCI\u00D3N", JOptionPane.WARNING_MESSAGE);            
            }
            
            if(ordenProveedor.getId() != null ){
                 navigation = UPDATE_ORDER;
                 g_order_provider_id = ordenProveedor.getId();
            }else{
                 navigation = NEW_ORDER;
            }
        }
        
         Renta renta = saleService.obtenerRentaPorId(new Integer(g_rentaId), funcion);
         DefaultTableModel tablaDetalle = (DefaultTableModel) tablaArticulos.getModel();
         this.lblInformacionInicial.setText("FOLIO: "+renta.getFolio());
          
            for(DetalleRenta detalle : renta.getDetalleRenta()){
                    Object fila[] = {                                          
                        detalle.getArticulo().getArticuloId()+"",   
                        detalle.getCantidad()+"",
                        detalle.getArticulo().getDescripcion()+" "+detalle.getArticulo().getColor().getColor(), 
                        detalle.getArticulo().getPrecioCompra()
                    };
                    tablaDetalle.addRow(fila);
            }
            
        if(navigation.equals(UPDATE_ORDER)){
            txtProviderName.setText(ordenProveedor.getProveedor().getNombre() + " "+ordenProveedor.getProveedor().getApellidos() );
            g_provider_id = ordenProveedor.getProveedor().getId();
            txtCommentOrder.setText(ordenProveedor.getComentario());
            
            // llenamos los articulos del proveedor
             DefaultTableModel tabla = (DefaultTableModel) jTableOrderProvider.getModel();
             
             for(DetalleOrdenProveedor detalle : ordenProveedor.getDetalleOrdenProveedorList()){
                Object fila[] = {                                          
                        detalle.getId(),
                        detalle.getArticulo().getArticuloId(),
                        detalle.getArticulo().getDescripcion()+" "+detalle.getArticulo().getColor().getColor(),
                        detalle.getCantidad(),
                        detalle.getPrecio(),
                        detalle.getComentario(),
                        buildOrderType(detalle.getTipoOrden())
                    };
                tabla.addRow(fila);
             }
            
        }
         
    }
    
    public String buildOrderType(String type){
        if(type.equals("1")){
            return TO_BUILDER_TYPE_SHOPPING;
        }else{
            return TO_BUILDER_TYPE_RENTAL;
        }
    }
    
    public void resetComboOrderType() {
       
        this.comboOrderType.removeAllItems();
        comboOrderType.addItem(ApplicationConstants.CMB_SELECCIONE);
        comboOrderType.addItem(TO_BUILDER_TYPE_SHOPPING);
        comboOrderType.addItem(TO_BUILDER_TYPE_RENTAL);
       
    }
    
     public void formato_tabla_orden() {
        Object[][] data = {{"","","","","","",""}};
        String[] columnNames = {
                        "id_detalle_orden",
                        "id_articulo", 
                        "articulo",
                        "cantidad", 
                        "precio",                        
                        "comentario",
                        "tipo_orden"};
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames);
        jTableOrderProvider.setModel(tableModel);
        
        TableRowSorter<TableModel> ordenarTabla = new TableRowSorter<TableModel>(tableModel); 
        jTableOrderProvider.setRowSorter(ordenarTabla);

        int[] anchos = {20,20,80,40,40, 80,100};

        for (int inn = 0; inn < jTableOrderProvider.getColumnCount(); inn++) {
            jTableOrderProvider.getColumnModel().getColumn(inn).setPreferredWidth(anchos[inn]);
        }

        try {
            DefaultTableModel temp = (DefaultTableModel) jTableOrderProvider.getModel();
            temp.removeRow(temp.getRowCount() - 1);
        } catch (ArrayIndexOutOfBoundsException e) {
            ;
        }
        DefaultTableCellRenderer centrar = new DefaultTableCellRenderer();
        centrar.setHorizontalAlignment(SwingConstants.CENTER);

        jTableOrderProvider.getColumnModel().getColumn(HD_ORDEN_PROVEEDOR_ID_ORDEN).setMaxWidth(0);
        jTableOrderProvider.getColumnModel().getColumn(HD_ORDEN_PROVEEDOR_ID_ORDEN).setMinWidth(0);
        jTableOrderProvider.getColumnModel().getColumn(HD_ORDEN_PROVEEDOR_ID_ORDEN).setPreferredWidth(0);
        
         jTableOrderProvider.getColumnModel().getColumn(HD_ORDEN_PROVEEDOR_ID_ARTICULO).setMaxWidth(1);
        jTableOrderProvider.getColumnModel().getColumn(HD_ORDEN_PROVEEDOR_ID_ARTICULO).setMinWidth(1);
        jTableOrderProvider.getColumnModel().getColumn(HD_ORDEN_PROVEEDOR_ID_ARTICULO).setPreferredWidth(1);
        
    }
     
     public void formato_tabla_articulos() {
        Object[][] data = {{"", "","",""}};
        String[] columnNames = {"id_articulo","cantidad", "descripcion","precio compra"};
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames);
        tablaArticulos.setModel(tableModel);
        
        // Instanciamos el TableRowSorter y lo añadimos al JTable
        TableRowSorter<TableModel> ordenarTabla = new TableRowSorter<TableModel>(tableModel); 
        tablaArticulos.setRowSorter(ordenarTabla);

        int[] anchos = {20, 40,120,40};

        for (int inn = 0; inn < tablaArticulos.getColumnCount(); inn++) {
            tablaArticulos.getColumnModel().getColumn(inn).setPreferredWidth(anchos[inn]);
        }

        try {
            DefaultTableModel temp = (DefaultTableModel) tablaArticulos.getModel();
            temp.removeRow(temp.getRowCount() - 1);
        } catch (ArrayIndexOutOfBoundsException e) {
            ;
        }
        DefaultTableCellRenderer centrar = new DefaultTableCellRenderer();
        centrar.setHorizontalAlignment(SwingConstants.CENTER);

        tablaArticulos.getColumnModel().getColumn(0).setMaxWidth(0);
        tablaArticulos.getColumnModel().getColumn(0).setMinWidth(0);
        tablaArticulos.getColumnModel().getColumn(0).setPreferredWidth(0);
        tablaArticulos.getColumnModel().getColumn(1).setCellRenderer(centrar);
       

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableOrderProvider = new javax.swing.JTable(){public boolean isCellEditable(int rowIndex,int colIndex){return false;}};
        jButton1 = new javax.swing.JButton();
        lblQuitarElemento = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaArticulos = new javax.swing.JTable(){public boolean isCellEditable(int rowIndex,int colIndex){return false;}};
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtArticulo = new javax.swing.JTextField();
        txtPrecioCobrar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtComentario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        txtCantidad = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboOrderType = new javax.swing.JComboBox();
        lblEncontrados = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btnShowProviders = new javax.swing.JButton();
        txtProviderName = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        lblInformacionInicial = new javax.swing.JLabel();
        txtCommentOrder = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();

        setLocationRelativeTo(lblQuitarElemento);
        setTitle("Faltantes/Devolucion");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pedidos al proveedor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        jTableOrderProvider.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jTableOrderProvider.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableOrderProvider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableOrderProvider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableOrderProviderMouseClicked(evt);
            }
        });
        jTableOrderProvider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableOrderProviderKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableOrderProvider);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("(-) quitar elemento");
        jButton1.setToolTipText("Elimina el elemento de la bd");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblQuitarElemento.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lblQuitarElemento.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblQuitarElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(172, 172, 172)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuitarElemento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 150, 620, 460));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Articulos del pedido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        jPanel3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        tablaArticulos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tablaArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaArticulos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaArticulos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaArticulosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaArticulos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 620, 430));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agregar articulo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel1.setText("Articulo:");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 60, 20));
        jLabel1.getAccessibleContext().setAccessibleName("asd");

        txtArticulo.setEditable(false);
        txtArticulo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel4.add(txtArticulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 170, -1));

        txtPrecioCobrar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtPrecioCobrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioCobrarKeyPressed(evt);
            }
        });
        jPanel4.add(txtPrecioCobrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 80, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel2.setText("Costo:");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 90, 20));

        txtComentario.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtComentario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtComentarioKeyPressed(evt);
            }
        });
        jPanel4.add(txtComentario, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 340, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel3.setText("Comentario:");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 60, 20));

        btnAgregar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnAgregar.setText("(+) agregar");
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel4.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 40, 140, 24));

        txtCantidad.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantidadKeyPressed(evt);
            }
        });
        jPanel4.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 70, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel4.setText("Cantidad:");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 60, 20));

        comboOrderType.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comboOrderType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel4.add(comboOrderType, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 40, 190, -1));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 1250, 70));

        lblEncontrados.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel2.add(lblEncontrados, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 580, 530, 20));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Proveedor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnShowProviders.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnShowProviders.setText("Mostrar proveedores");
        btnShowProviders.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnShowProviders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowProvidersActionPerformed(evt);
            }
        });
        jPanel7.add(btnShowProviders, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 130, 24));

        txtProviderName.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtProviderName.setEnabled(false);
        jPanel7.add(txtProviderName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 360, -1));

        jPanel2.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 380, 70));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información general", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblInformacionInicial.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel8.add(lblInformacionInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 330, 20));

        txtCommentOrder.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel8.add(txtCommentOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 310, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel5.setText("Comentario:");
        jPanel8.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 43, -1, 20));

        btnSave.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnSave.setText("Guardar");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel8.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 130, 24));

        jPanel2.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 820, 70));

        add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
//        inventario.validar_colores = true;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void tablaArticulosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaArticulosMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
           
            this.enabledInputBoxes();
            
            String artId = tablaArticulos.getValueAt(tablaArticulos.getSelectedRow(), HD_ARTICULOS_ID_ARTICULO).toString();
            String descripcion = tablaArticulos.getValueAt(tablaArticulos.getSelectedRow(), HD_ARTICULOS_DESCRIPCION_ARTICULO).toString();
            String precioCobrar = tablaArticulos.getValueAt(tablaArticulos.getSelectedRow(), HD_ARTICULOS_PRECIO_COBRAR).toString();
            this.g_cantidadEnPedido = tablaArticulos.getValueAt(tablaArticulos.getSelectedRow(), HD_ARTICULOS_CANTIDAD_PEDIDO).toString();
            if(this.g_cantidadEnPedido == null || this.g_cantidadEnPedido.equals(""))
                this.g_cantidadEnPedido = "0";
            this.g_articuloId = artId;
            this.txtArticulo.setText(descripcion);
            this.txtCantidad.requestFocus(); 
            this.txtPrecioCobrar.setText(precioCobrar);
            
        }
    }//GEN-LAST:event_tablaArticulosMouseClicked

    public void agregar_articulo_a_orden(){
        
        StringBuilder mensaje = new StringBuilder();
        int cont = 0;
        
        if(txtArticulo.getText().equals(""))
            mensaje.append(++cont + ". Debes elegir un articulo para agregar el faltante\n");

        float cantidad = 0f;
        float precio = 0f;
        String tipoOrden = this.comboOrderType.getSelectedItem().toString();
        
        
        try {
            cantidad = new Float(this.txtCantidad.getText());
           
            
        } catch (NumberFormatException e) {
            mensaje.append(++cont + ". Error al ingresar la cantidad\n");
        } catch (Exception e) {
            mensaje.append(++cont + ". Error al ingresar la cantidad\n");
        }
        
         try {
           
            precio = new Float(this.txtPrecioCobrar.getText());
            
        } catch (NumberFormatException e) {
            mensaje.append(++cont + ". Error al ingresar el precio\n");
        } catch (Exception e) {
            mensaje.append(++cont + ". Error al ingresar el precio\n");
        }
        
        if(cantidad <= 0 ){
            mensaje.append(++cont + ". La cantidad debe ser mayor a cero\n");
        }
        
        
        if(tipoOrden.equals(ApplicationConstants.CMB_SELECCIONE)){
            mensaje.append(++cont + ". Seleccione tipo de orden\n");
        }
        if(!mensaje.toString().equals("")){
            JOptionPane.showMessageDialog(null, mensaje+"", "Error", JOptionPane.INFORMATION_MESSAGE);            
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        
        // verificamos si existe para lanzar una advertencia
        boolean existe = false;
        for (int i = 0; i < jTableOrderProvider.getRowCount(); i++) {            
            if (this.g_articuloId.equals(jTableOrderProvider.getValueAt(i, HD_ORDEN_PROVEEDOR_ID_ARTICULO).toString() )
                    ) {
                existe = true;
                break;
            }
        }
        
        if (existe){
            if(JOptionPane.showOptionDialog(this, "Ya existe ese articulo.  \u00BFContinuar? " ,"Confirme", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si") != 0)
                return;                
        }

        String comentario = this.txtComentario.getText();

        String datos[] = {
            "0",
            g_articuloId,
            txtArticulo.getText(),
            cantidad+"",
            precio+"",
            comentario,
            tipoOrden};       
                
      DefaultTableModel tabla = (DefaultTableModel) jTableOrderProvider.getModel();
      tabla.addRow(datos);
        
       this.resetInputBoxes();
       
    }
    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        
       this.agregar_articulo_a_orden();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtPrecioCobrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCobrarKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPrecioCobrarKeyPressed

    private void txtComentarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComentarioKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtComentarioKeyPressed

    private void jTableOrderProviderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableOrderProviderKeyPressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jTableOrderProviderKeyPressed

    private void jTableOrderProviderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOrderProviderMouseClicked
        // TODO add your handling code here:
         if (evt.getClickCount() == 2) {
            String comentario = jTableOrderProvider.getValueAt(jTableOrderProvider.getSelectedRow(), HD_ORDEN_PROVEEDOR_COMENTARIO).toString();
            String descripcionArticulo = jTableOrderProvider.getValueAt(jTableOrderProvider.getSelectedRow(), HD_ORDEN_PROVEEDOR_DESCRIPCION_ARTICULO).toString();
            this.lblQuitarElemento.setText(comentario.toUpperCase() + " : " +descripcionArticulo);
        }
    }//GEN-LAST:event_jTableOrderProviderMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         if(iniciar_sesion.usuarioGlobal.getAdministrador().equals("0")){
            JOptionPane.showMessageDialog(null, ApplicationConstants.MESSAGE_NOT_PERMISIONS_ADMIN, "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (jTableOrderProvider.getSelectedRow() == - 1) {
            JOptionPane.showMessageDialog(null, "Selecciona una fila para continuar ", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String id = jTableOrderProvider.getValueAt(jTableOrderProvider.getSelectedRow(), HD_ORDEN_PROVEEDOR_ID_ORDEN).toString();
        
        if(id == null || id.equals("")){
            JOptionPane.showMessageDialog(null, "Ocurrio un error, intenta de nuevo o reinicia la aplicacion ", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        if(id.equals("0")){
            // entonces es primera vez solo eliminamos de la tabla
             DefaultTableModel temp = (DefaultTableModel) this.jTableOrderProvider.getModel();
             temp.removeRow(jTableOrderProvider.getSelectedRow());
            
        }else{
            if(JOptionPane.showOptionDialog(this, "Se eliminara de la bd,  \u00BFContinuar? " ,"Confirme eliminacion", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si") != 0)
                return;
        
            String datos[] = {"0",id};
            try {                   
               funcion.UpdateRegistro(datos, "UPDATE detalle_orden_proveedor SET fg_activo=? WHERE id=?");
               DefaultTableModel temp = (DefaultTableModel) this.jTableOrderProvider.getModel();
              temp.removeRow(jTableOrderProvider.getSelectedRow());
            } catch (Exception e) {
                LOGGER.error(String.format(" ocurrio un error al actualizar los datos [%s] ", e));
                JOptionPane.showMessageDialog(null, "Ocurrio un error actualizar la orden\n "+e, "Error", JOptionPane.ERROR_MESSAGE); 
            } 
        }
        
       
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadKeyPressed

    private void btnShowProvidersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowProvidersActionPerformed
        // TODO add your handling code here:
        
        showProviders();
    }//GEN-LAST:event_btnShowProvidersActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        this.saveOrderProvider();
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddOrderProvider dialog = new AddOrderProvider(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnShowProviders;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboOrderType;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableOrderProvider;
    private javax.swing.JLabel lblEncontrados;
    private javax.swing.JLabel lblInformacionInicial;
    private javax.swing.JLabel lblQuitarElemento;
    private javax.swing.JTable tablaArticulos;
    private javax.swing.JTextField txtArticulo;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtComentario;
    public static javax.swing.JTextField txtCommentOrder;
    private javax.swing.JTextField txtPrecioCobrar;
    public static javax.swing.JTextField txtProviderName;
    // End of variables declaration//GEN-END:variables
}
